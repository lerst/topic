!SESSION 2015-10-29 07:58:44.017 -----------------------------------------------
eclipse.buildId=4.3.2.M20140221-1700
java.version=1.7.0_40
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=zh_TW
Framework arguments:  -product org.eclipse.epp.package.standard.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.standard.product

This is a continuation of log file C:\Users\lerst\workspace\test\.metadata\.bak_0.log
Created Time: 2015-10-29 10:10:10.382

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.386
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.390
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.393
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.425
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.428
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.432
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.468
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.472
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.476
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.510
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.513
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.516
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.566
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.570
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.573
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.606
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.610
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.613
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.648
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.651
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.654
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.689
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.691
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.720
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.724
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.728
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.756
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.760
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.764
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.797
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.801
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.803
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.850
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.855
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.876
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.880
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.884
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:246)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:203)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.888
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.891
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.893
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.926
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.929
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.932
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:10.963
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:10.968
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:10.972
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.810
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.813
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.816
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.850
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.853
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.856
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.884
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.888
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.890
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.917
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.920
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.922
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.951
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.954
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.956
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:14.986
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:14.989
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:14.992
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.018
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.022
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.024
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.050
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.054
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.056
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.087
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.091
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.093
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.119
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.123
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.126
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.153
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.156
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.159
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.185
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.189
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.191
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.217
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.221
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.224
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.251
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 2 2015-10-29 10:10:15.254
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.ui 4 0 2015-10-29 10:10:15.257
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

!ENTRY org.eclipse.jdt.core 4 4 2015-10-29 10:10:15.282
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.fcu.topic;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Location;

import com.google.android.gms.location.LocationListener;

import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.GoogleApiClient.ConnectionCallbacks;
import com.google.android.gms.common.api.GoogleApiClient.OnConnectionFailedListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.InfoWindowAdapter;
import com.google.android.gms.maps.GoogleMap.OnMarkerClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.Circle;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.maps.model.LatLng;

public class map extends Activity implements LocationListener,OnClickListener
											 ,OnMarkerClickListener,ConnectionCallbacks
											 ,OnConnectionFailedListener{

	private boolean getopen=false,getService = false;
	private Double lng = 120.648331,lat = 24.181767;
	private GoogleMap mMap;
	String[] campname={"紅軍","藍軍","中立軍"};
    private ViewGroup infoWindow;
    private TextView infoTitle,infoSnippet,infoCamp,infoGuard;
    private Button infoButton;
    
	private SQLiteDatabase db;
	private NewListDataSQL helper;
	private Cursor cursor;
	
	private int maxi;
	
    private SensorManager sm;  
    
    private Sensor aSensor,mSensor;
    
    float[] accelerometerValues = new float[3];  
    float[] magneticFieldValues = new float[3];  
    
    private OnInfoWindowElemTouchListener infoButtonListener;
    private GoogleApiClient mGoogleApiClient;
    private LocationRequest mLocationRequest;
	private global_var globalVariable;

	private Location location;
	private Circle mylocationcircle;
	private Marker mylocation;
	private Intent intent;
		
	int my_ids[] = {
             R.id.mlocation, R.id.status,R.id.skill,R.id.mission,R.id.bag,R.id.openmove,R.id.mybase
    };
	
	@SuppressLint("InflateParams")
	@Override
	protected void onCreate(Bundle savedInstanceState){
		
		super.onCreate(savedInstanceState);
		setContentView(R.layout.map);

				initOnClickListener();			
				helper= NewListDataSQL.getInstance(map.this);
				db = helper.getReadableDatabase();
				globalVariable = (global_var) map.this.getApplicationContext();
				
				infoWindow = (ViewGroup)getLayoutInflater().inflate(R.layout.windowlayout, null);
		        infoTitle = (TextView)infoWindow.findViewById(R.id.title);
		        infoSnippet = (TextView)infoWindow.findViewById(R.id.snippet);
		        infoCamp = (TextView)infoWindow.findViewById(R.id.camp);
		        infoGuard = (TextView)infoWindow.findViewById(R.id.guardnum);

		        infoButton = (Button)infoWindow.findViewById(R.id.windowbattle);
		        infoButton.setFocusable(true);
				
		        mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
				mMap.setOnMarkerClickListener(this);
				
			    final MapWrapperLayout mapWrapperLayout = (MapWrapperLayout)findViewById(R.id.map_relative_layout);
				
				mapWrapperLayout.init(mMap, getPixelsFromDp(this, 39 + 20)); 
		        
		        infoButtonListener = new OnInfoWindowElemTouchListener(infoButton,getResources().getDrawable(android.R.drawable.btn_default),
		                getResources().getDrawable(R.drawable.common_signin_btn_icon_pressed_dark)) 
		        {
		            @Override
		            protected void onClickConfirmed(View v, Marker marker) {
		                // Here we can perform some action triggered after clicking the button
		            	if(Math.abs((marker.getPosition().latitude-lat))+Math.abs((marker.getPosition().longitude-lng))>1000)//0.000015
		            	{
		    				Toast.makeText(map.this,"your latlng is too far", Toast.LENGTH_SHORT).show();
		            	}
		            	else
		            	{
		            	if(marker.getTitle().equals("Enemy"))
		            	{
		            	if(globalVariable.hp/1000!=0)
		            	{
		            		
		            	db = helper.getReadableDatabase();
		            	String[] spilt=marker.getSnippet().split("\n");
		            	cursor = db.rawQuery("select Enemy_ID from Enemy where Enemy_Name='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    globalVariable.enemyid=cursor.getString(0);
					    cursor = db.rawQuery("select EnemyType_ID from EnemyinheritType where Enemy_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    spilt[0]=cursor.getString(0);
					    cursor = db.rawQuery("select Enemy_HP,Enemy_AttackCD,Enemy_hit from EnemyType where EnemyType_ID='"+spilt[0]+"'", null);
					    cursor.moveToFirst();
					    globalVariable.enemyhpmax=cursor.getInt(0);
					    globalVariable.enemyattckcd=cursor.getInt(1);
					    globalVariable.enemyattackpoint=cursor.getInt(2);
		            	connect battle =new connect("http://104.155.231.100/battle.php?case=0&playerid="+globalVariable.id+"&enemyid="+globalVariable.enemyid);
						String x=battle.con();
						String[] cut=x.split("<body>");
			            x=cut[1];
				            if(x.charAt(1)=='E')
				            {
				            	intent = new Intent();
								intent.setClass(map.this, battle.class);
								startActivity(intent);
								map.this.finish();
				            }
				            else
				            {
				            	Toast.makeText(map.this,"This monster is in battle", Toast.LENGTH_SHORT).show();
				            }
			            }
		            	else
		            	{
		    				Toast.makeText(map.this,"hp=0", Toast.LENGTH_SHORT).show();
		            	}
		            	}
		            	if(marker.getTitle().equals("Shop"))
		            	{
			            db = helper.getReadableDatabase();
                		cursor = db.rawQuery("select Shop_ID from Shop where Shop_Name='"+marker.getSnippet()+"'",null);
                		cursor.moveToFirst();
                		globalVariable.shopid=cursor.getString(0);
                		globalVariable.shopname=marker.getSnippet();
		            	intent = new Intent();
						intent.setClass(map.this, shop.class);
						startActivity(intent);
		            	}
		            	if(marker.getTitle().equals("Base"))
		            	{
		            		db = helper.getReadableDatabase();
		            		cursor = db.rawQuery("select Base_ID from Base where Base_Name = '"+marker.getSnippet()+"'",null);
			                cursor.moveToFirst();
			                connect Baseconnect=new connect("http://104.155.231.100/base.php?playerid="+globalVariable.id+"&baseid="+cursor.getString(0));
							String x=Baseconnect.con();
							String[] cut=x.split("<body>");
				            x=cut[1];

		                	if(x.charAt(0)=='+') //同陣營
		                	{
		                		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
		                		x.length();
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.leaguebaselayout);
			                	cursor = db.rawQuery("select Guard_Name,Guard_Price from Guard",null);
			                	cursor.moveToFirst();
			                	String[] Guard_Name = new String[cursor.getCount()];
			                	final String[] Guard_price = new String[cursor.getCount()];
			            		for(int i=0;i<cursor.getCount();i++)
			            		{
			            			Guard_Name[i] = cursor.getString(0);
			            			Guard_price[i] = cursor.getString(1);
			            			cursor.moveToNext();
			            		}
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		final TextView price;
			            		price=(TextView)mydialog.findViewById(R.id.require);
			            		spinner.setOnItemSelectedListener(new OnItemSelectedListener(){

									@Override
									public void onItemSelected(
											AdapterView<?> parent, View view,
											int position, long id) {
										// TODO Auto-generated method stub
										price.setText("所需資源:"+Guard_price[(int)id]);
									}

									@Override
									public void onNothingSelected(
											AdapterView<?> parent) {
										// TODO Auto-generated method stub
										
									}

			            		}
			            		);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){
			            			@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		                	else//敵對 中立
		                	{
		                		final Dialog mydialog=new Dialog(map.this);
			            		mydialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
			            		mydialog.setContentView(R.layout.enemybaselayout);
			            		cut=x.split("<br>");
		                		x=cut[1];
		                		cut=x.split("</body>");
		                		x=cut[0];
		                		cut=x.split(" ");
			                	String[] Guard_Name = new String[cut.length];
			            		for(int i=0;i<;i++)
			            		{
				                	cursor = db.rawQuery("select Guard_Name from Guard where Guard_ID='"+cut[i]+"'",null);
				                	cursor.moveToFirst();
			            			Guard_Name[i] = cursor.getString(0)+"		1";
			            		}
			            			cursor.moveToNext();
			                	ArrayAdapter<String> XDlist = new ArrayAdapter<String>(map.this,R.layout.myspanner,Guard_Name);
			            		final Spinner spinner=(Spinner)mydialog.findViewById(R.id.spinner1);
			            		Button accept,cancel;
			            		accept = (Button)mydialog.findViewById(R.id.yes);
			            		cancel = (Button)mydialog.findViewById(R.id.no);
			            		accept.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			String select=spinner.getSelectedItem().toString();;
			            			String[] selectguardname=select.split("		");
				                	cursor = db.rawQuery("select Guard_HP,Guard_AttackCD,Guard_AttackWay from Guard where Guard_Name = '"+selectguardname[0]+"'",null);
				                	cursor.moveToFirst();
				                	globalVariable.enemyhpmax=cursor.getInt(0);
									globalVariable.enemyattckcd=cursor.getInt(1);
									globalVariable.enemyattackpoint=cursor.getInt(2);
									intent = new Intent();
									intent.setClass(map.this, battle.class);
									startActivity(intent);
									map.this.finish();
			            			}
			            		});
			            		
			            		cancel.setOnClickListener(new OnClickListener(){@Override
			            			public void onClick(View v) {
										// TODO Auto-generated method stub
			            			mydialog.dismiss();;
			            			}
			            		});
			            		spinner.setAdapter(XDlist);
			            		mydialog.show();
		                	}
		            	}
		            }
		        }}; 
		        
		        infoButton.setOnTouchListener(infoButtonListener);

		        mMap.setInfoWindowAdapter(new InfoWindowAdapter() {
		            @Override
		            public View getInfoWindow(Marker marker) {
		            	
		                return null;
		            }

		            @Override
		            public View getInfoContents(Marker marker) {
		                // Setting up the infoWindow with current's marker info
		                infoTitle.setText(marker.getTitle());
		                infoSnippet.setText(marker.getSnippet());
		                if(marker.getTitle().equals("Base"))
		                {
		                infoCamp.setVisibility(0);
		                infoGuard.setVisibility(0);
		            	db = helper.getReadableDatabase();
	            		cursor = db.rawQuery("select Camp_ID from BasebelongCamp,Base where Base_Name = '"+marker.getSnippet()+"' and BasebelongCamp.Base_ID=Base.Base_ID",null);
		                cursor.moveToFirst();
		                for(int i=1;i<4;i++)
		                {
		                 if(cursor.getString(0).equals("C0"+i))
		                 {
		                	 infoCamp.setText(campname[i-1]);
		                 }
		                }
	            		//cursor = db.rawQuery("select SUM(Guard_Quantity) from Guard",null);
		                //cursor.moveToFirst();
		                infoGuard.setText("守衛數量: 1");
		                }
		                else
		                {
		                	infoCamp.setVisibility(8);
		                	infoGuard.setVisibility(8);
		                }
		                infoButtonListener.setMarker(marker);
		                
		                // We must call this to set the current marker and infoWindow references
		                // to the MapWrapperLayout
		                mapWrapperLayout.setMarkerWithInfoWindow(marker, infoWindow);
		                return infoWindow;
		            }
		        });
		        InitMapMarker();
			    mGoogleApiClient = new GoogleApiClient.Builder(this)
		        .addConnectionCallbacks(this)
		        .addOnConnectionFailedListener(this)
		        .addApi(LocationServices.API)
		        .build();
			    
			    mGoogleApiClient.connect();
				mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
			    sm = (SensorManager)getSystemService(Context.SENSOR_SERVICE);  
			    aSensor = sm.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);  
			    mSensor = sm.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);  
			}

    final SensorEventListener myListener = new SensorEventListener() {
    public void onSensorChanged(SensorEvent sensorEvent) {  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)  
    magneticFieldValues = sensorEvent.values;  
    if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER)  
        accelerometerValues = sensorEvent.values;  
    if(getService)
    {
    calculateOrientation();
    }
    
    }  
    public void onAccuracyChanged(Sensor sensor, int accuracy) {}  
    };  

	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		if(mGoogleApiClient.isConnected())
	    LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
	}
	@Override
	public void onDestroy() {
		   super.onDestroy();
		    LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
		   if (cursor != null) {
		      cursor.close();
		   }
		   if (db != null) {
		      db.close();
		   }
		}
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
        sm.unregisterListener(myListener);
        if(mGoogleApiClient.isConnected())
        {
		LocationServices.FusedLocationApi.removeLocationUpdates(mGoogleApiClient, this);
        }
    }

	@Override
	protected void onRestart() { //
		// TODO Auto-generated method stub
		super.onRestart();
		//testLocationProvider();
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub

		if (keyCode == KeyEvent.KEYCODE_BACK) { 
			new AlertDialog.Builder(map.this)
					.setTitle("離開遊戲")
					.setMessage("確定要結束應用程式嗎?")
					.setPositiveButton("確定",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									map.this.finish();
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {

								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									// TODO Auto-generated method stub

								}
							}).show();
		}
		return true;
	}

	@Override
	public void onLocationChanged(Location location) {
		// TODO Auto-generated method stub
		this.location=location;
		if(mylocation!=null)
		{mylocation.remove();
		mylocationcircle.remove();}
		lat=location.getLatitude();
		lng=location.getLongitude();
		mylocation=mMap.addMarker(new MarkerOptions()
									  .position(new LatLng(lat, lng))
									  .icon(BitmapDescriptorFactory.fromResource(R.drawable.now)));
		mylocationcircle=mMap.addCircle(new CircleOptions()
				.center(new LatLng(lat, lng))
				.radius(10).strokeColor(Color.RED).fillColor(0x1f98F5FF)
				.strokeWidth(1)
		);
	}

	public static int getPixelsFromDp(Context context, float dp) {
	        final float scale = context.getResources().getDisplayMetrics().density;
	        return (int)(dp * scale + 0.5f);
	}
	  
	private void calculateOrientation() {  
	          float[] values = new float[3];  
	          float[] R = new float[9];  
	          SensorManager.getRotationMatrix(R, null, accelerometerValues, magneticFieldValues);           
	          SensorManager.getOrientation(R, values);  
	          values[0] = (float) Math.toDegrees(values[0]);  
	          if(values[0]<0)
	          {
	        	  values[0]=values[0]+360;
	          }
              CameraPosition cameraPosition = new CameraPosition.Builder()
              .target(new LatLng(lat,lng))             	// Sets the center of the map to current location
              .zoom(18)                			 	 	// Sets the zoom
              .bearing(values[0]) 		 				// Sets the orientation of the camera to east
              .tilt(0)                				 	// Sets the tilt of the camera to 0 degrees
              .build();                  				// Creates a CameraPosition from the builder
              mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition), 100, null);
	    }	  
	  
	  public void initOnClickListener() {
	        ImageButton b = null;
	        for( int i=0 ; i< my_ids.length ; ++i )
	                if( ( b = (ImageButton) findViewById(my_ids[i]) ) != null ) 
	                        b.setOnClickListener(this);  
	  }
	  public void InitMapMarker()
	  {
		  cursor = db.rawQuery("select Base_Name, Base_Latitude, Base_Longitude from Base", null);
	    	cursor.moveToFirst();
			maxi=cursor.getCount();
			for(int count=0;count<maxi;count++)
			{
				mMap.addMarker(new MarkerOptions()
						  .position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.castle))
						  .title("Base")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
			}
			cursor = db.rawQuery("select Shop_Name, Shop_Latitude,Shop_Longitude from Shop", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.house))
						  .title("Shop")
						  .snippet(cursor.getString(0)));
		    	cursor.moveToNext();
		    }
			cursor = db.rawQuery("select Enemy_Name, Enemy_Latitude, Enemy_Longitude,EnemyType_ID from Enemy,EnemyinheritType where Enemy.Enemy_ID=EnemyinheritType.Enemy_ID", null);
		    cursor.moveToFirst();
		    maxi=cursor.getCount();
		    for(int count=0;count<maxi;count++)
		    {
		    	
		    	mMap.addMarker(new MarkerOptions().position(new LatLng(cursor.getDouble(1), cursor.getDouble(2)))
						  .icon(BitmapDescriptorFactory.fromResource(R.drawable.enemy))
						  .title("Enemy")
						  .snippet(cursor.getString(0)+"\n類型"+cursor.getString(3).charAt(1)));
		    	cursor.moveToNext();
		    }
		    
	  }
	  public void onClick(View v) {
	        switch( v.getId() ) {    
	                case R.id.mlocation:
						if (location!=null) {
							mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
						}
						else
						{
							Toast.makeText(this, "location is null please open gps", Toast.LENGTH_SHORT).show();
						}
	                        break;
	                        
	                case R.id.status:
	                	intent = new Intent();
						intent.setClass(map.this, status.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.skill:
	                	intent = new Intent();
						intent.setClass(map.this, magic.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.mission:
	                	intent = new Intent();
						intent.setClass(map.this, mission.class);
						startActivity(intent);
						this.finish();
	                	break;
	                	
	                case R.id.bag:
	                	intent = new Intent();
						intent.setClass(map.this, bag.class);
						startActivity(intent);
						this.finish();
	                    break;
	                
	                case R.id.openmove:
	                	if(!getopen)
	                	{
	                		getopen=true;
	        			    sm.registerListener(myListener, aSensor, SensorManager.SENSOR_DELAY_NORMAL);  
	        			    sm.registerListener(myListener, mSensor,SensorManager.SENSOR_DELAY_NORMAL);  
	                	}
	                	else
	                	{
		                	getopen=false;
		                    sm.unregisterListener(myListener);  
	                	}
	                	
	                    break;
	                case R.id.mybase:
	                		
	                    break;

	        }
	  }

	@Override
	public boolean onMarkerClick(final Marker marker) {
		// TODO Auto-generated method stub
		if(marker.equals(mylocation))
		{
		return true;
		}
		
		return false;
	}

	@Override
	public void onConnectionFailed(ConnectionResult arg0) {
		// TODO Auto-generated method stub
		getService = false;
		Toast.makeText(this, "connectfailed", Toast.LENGTH_SHORT).show();
	}

	@Override
	public void onConnected(Bundle arg0) {
		// TODO Auto-generated method stub
        location = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient);
        mLocationRequest = new LocationRequest();
	    mLocationRequest.setInterval(1000);
	    mLocationRequest.setFastestInterval(500);
	    mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        LocationServices.FusedLocationApi.requestLocationUpdates(mGoogleApiClient, mLocationRequest, this);
        if (location != null) {
        	lat=location.getLatitude();
        	lng=location.getLongitude();
        	getService = true;
			mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(new LatLng(lat, lng), 20));
        }
        else
        {
        getService = false;
		Toast.makeText(this, "can't find location", Toast.LENGTH_SHORT).show();
        }
   }

	@Override
	public void onConnectionSuspended(int arg0) {
		// TODO Auto-generated method stub
		
	}
	

	  
}
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:506)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:325)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1544)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2474)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:537)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:186)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2679)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1222)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1207)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)
